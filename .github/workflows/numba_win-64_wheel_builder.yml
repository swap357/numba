name: numba_win-64_wheel_builder

on:
  pull_request:
    paths:
      - .github/workflows/numba_win-64_wheel_builder.yml
      - .github/workflows/wheel_workflow_matrix.json
      - buildscripts/github/validate_imports.py
  workflow_dispatch:
    inputs:
      llvmlite_wheel_runid:
        description: 'llvmlite wheel workflow run ID (optional)'
        required: false
        type: string

# Add concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  ARTIFACT_RETENTION_DAYS: 7
  WHEELS_INDEX_URL: https://pypi.anaconda.org/numba/label/dev/simple

jobs:
  load-matrix:
    runs-on: ubuntu-latest
    outputs:
      build-matrix-json: ${{ steps.load_matrix_json.outputs.build-matrix-json }}
      test-matrix-json: ${{ steps.load_matrix_json.outputs.test-matrix-json }}
    steps:
      - uses: actions/checkout@v4
      - id: load_matrix_json
        name: Load Workflow Matrix JSON
        run: |
          BUILD_MATRIX_JSON=$(jq -c .wheel_build_matrix .github/workflows/wheel_workflow_matrix.json)
          TEST_MATRIX_JSON=$(jq -c .wheel_test_matrix .github/workflows/wheel_workflow_matrix.json)

          # Add canonical python versions to both matrices
          BUILD_MATRIX_EXTENDED=$(echo "$BUILD_MATRIX_JSON" | jq -c '
            map(. + {"python_canonical": (.["python-version"] | split(".") | .[:2] | join("."))})
          ')

          TEST_MATRIX_EXTENDED=$(echo "$TEST_MATRIX_JSON" | jq -c '
            map(. + {"python_canonical": (.["python-version"] | split(".") | .[:2] | join("."))})
          ')

          echo "Build Matrix JSON: $BUILD_MATRIX_EXTENDED"
          echo "Test Matrix JSON: $TEST_MATRIX_EXTENDED"
          echo "build-matrix-json=$BUILD_MATRIX_EXTENDED" >> $GITHUB_OUTPUT
          echo "test-matrix-json=$TEST_MATRIX_EXTENDED" >> $GITHUB_OUTPUT

  win-64-build:
    name: win-64-build-wheel (py ${{ matrix.python-version }}, np ${{ matrix.numpy_build }})
    needs: load-matrix
    runs-on: windows-2025
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        include: ${{ fromJson(needs.load-matrix.outputs.build-matrix-json) }}
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download llvmlite wheel
        if: inputs.llvmlite_wheel_runid != ''
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-win-64-py${{ matrix.python_canonical }}
          path: llvmlite_wheels
          run-id: ${{ inputs.llvmlite_wheel_runid }}
          repository: numba/llvmlite
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install build dependencies
        run: |
          if [ "${{ inputs.llvmlite_wheel_runid }}" != "" ]; then
              python -m pip install llvmlite_wheels/*.whl
          else
              python -m pip install -i ${{ env.WHEELS_INDEX_URL }} llvmlite
          fi
          python -m pip install build numpy==${{ matrix.numpy_build }} setuptools wheel tbb==2021.6 tbb-devel==2021.6

      - name: Export TBB env (discover include/lib/bin from the wheel)
        shell: bash -el {0}
        run: |
          python - <<'PY'
          import os, sys, site, glob, json
          sp = (site.getsitepackages() or [sys.prefix + r'\Lib\site-packages'])[0]
          def find(patterns):
              hits = []
              for pat in patterns:
                  hits.extend(glob.glob(os.path.join(sp, '**', pat), recursive=True))
              return hits
          inc = None
          for cand in find(['oneapi/tbb/tbb.h','tbb/tbb.h']):
              inc = os.path.dirname(os.path.dirname(cand))  # .../include/oneapi or .../include/tbb
              while os.path.basename(inc).lower() not in ('include',):
                  inc = os.path.dirname(inc)
              break
          libs = find(['tbb*.lib'])
          bins = find(['tbb*.dll'])
          libdir = os.path.dirname(libs[0]) if libs else ''
          bindir = os.path.dirname(bins[0]) if bins else ''
          root = os.path.dirname(inc) if inc else sp
          env = {
            'TBBROOT': root.replace('/','\\'),
            'TBB_INCLUDE_DIR': inc.replace('/','\\') if inc else '',
            'TBB_LIBRARY_DIR': libdir.replace('/','\\'),
            'ADD_PATH': bindir.replace('/','\\'),
            'ADD_INCLUDE': inc.replace('/','\\') if inc else '',
            'ADD_LIB': libdir.replace('/','\\')
          }
          for k,v in env.items(): print(f'{k}={v}')
          open(os.environ['GITHUB_ENV'],'a').write('\n'.join(f'{k}={v}' for k,v in env.items() if v)+'\n')
          # MSVC uses INCLUDE/LIB; append rather than replace
          with open(os.environ['GITHUB_ENV'],'a') as f:
              if env['ADD_INCLUDE']: f.write(f'INCLUDE={env["ADD_INCLUDE"]};%INCLUDE%\n')
              if env['ADD_LIB']: f.write(f'LIB={env["ADD_LIB"]};%LIB%\n')
          open(os.environ['GITHUB_PATH'],'a').write(('\n'+env['ADD_PATH']+'\n') if env['ADD_PATH'] else '')
          PY

      - name: Verify TBB detection inputs
        shell: bash -el {0}
        run: |
          echo "TBBROOT=$TBBROOT"
          echo "TBB_INCLUDE_DIR=$TBB_INCLUDE_DIR"
          echo "TBB_LIBRARY_DIR=$TBB_LIBRARY_DIR"
          ls "$TBB_INCLUDE_DIR" | sed -n '1,50p' || true
          ls "$TBB_LIBRARY_DIR" || true
          (ls "$ADD_PATH" | grep -i tbb || true)

      - name: Build wheel
        run: python -m build --wheel --no-isolation

      - name: Upload numba wheel
        uses: actions/upload-artifact@v4
        with:
          name: numba_win-64_wheel_py${{ matrix.python_canonical }}
          path: dist/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

  win-64-validate:
    name: win-64-validate
    needs: [load-matrix, win-64-build]
    runs-on: windows-2025
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        include: ${{ fromJson(needs.load-matrix.outputs.build-matrix-json) }}
      fail-fast: false
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Install validation dependencies
        run: conda install -c defaults py-lief wheel twine keyring rfc3986

      - name: Download Numba wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: numba_win-64_wheel_py${{ matrix.python_canonical }}
          path: dist

      - name: Validate wheels
        run: |
          cd dist
          for WHL_FILE in *.whl; do
            wheel unpack "$WHL_FILE"
            python "$GITHUB_WORKSPACE"/buildscripts/github/validate_imports.py --platform win-64 --path .
            python -m twine check "$WHL_FILE"
          done

  win-64-test:
    name: win-64-test-wheel (py ${{ matrix.python-version }}, np ${{ matrix.numpy_test }})
    needs: [load-matrix, win-64-build]
    runs-on: windows-2025
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      matrix:
        include: ${{ fromJson(needs.load-matrix.outputs.test-matrix-json) }}
      fail-fast: false

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download Numba wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: numba_win-64_wheel_py${{ matrix.python_canonical }}
          path: dist

      - name: Download llvmlite wheel
        if: inputs.llvmlite_wheel_runid != ''
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-win-64-py${{ matrix.python_canonical }}
          path: llvmlite_wheels
          run-id: ${{ inputs.llvmlite_wheel_runid }}
          repository: numba/llvmlite
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate and test wheel
        env:
          NUMBA_CPU_NAME: generic
          _NUMBA_REDUCED_TESTING: 1
        run: |
          python -m pip install --upgrade pip twine
          python -m pip install numpy==${{ matrix.numpy_test }} tbb==2021.6 tbb-devel==2021.6
          if [ "${{ inputs.llvmlite_wheel_runid }}" != "" ]; then
              python -m pip install llvmlite_wheels/*.whl
          else
              python -m pip install -i ${{ env.WHEELS_INDEX_URL }} llvmlite
          fi
          python -m twine check dist/*.whl
          python -m pip install dist/*.whl

          # print Numba system information
          python -m numba -s

          # run tests
          python -m numba.runtests -m 4 -v
