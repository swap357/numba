name: numba_osx-arm64_wheel_builder

on:
  pull_request:
    paths:
      - .github/workflows/numba_osx-arm64_wheel_builder.yml
      - .github/workflows/workflow_matrix.json
    paths-ignore:
      - .github/workflows/workflow_matrix.json#conda_*
  workflow_dispatch:
    inputs:
      llvmlite_wheel_runid:
        description: 'llvmlite wheel workflow run ID (optional)'
        required: false
        type: string

# Add concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  ARTIFACT_RETENTION_DAYS: 7
  WHEELS_INDEX_URL: https://pypi.anaconda.org/numba/label/dev/simple
  CONDA_CHANNEL_NUMBA: numba/label/dev

jobs:
  load-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix-json: ${{ steps.load_matrix_json.outputs.matrix-json }}
    steps:
      - uses: actions/checkout@v4
      - id: load_matrix_json
        name: parse_matrix
        run: |
          MATRIX_JSON=$(jq -c .wheel_matrix .github/workflows/workflow_matrix.json)
          echo "matrix: $MATRIX_JSON"
          echo "matrix-json=$MATRIX_JSON" >> $GITHUB_OUTPUT

  osx-arm64-build:
    name: osx-arm64-build-wheel (py ${{ matrix.python-version }}, np ${{ matrix.numpy_build }})
    needs: load-matrix
    runs-on: macos-14
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        include: ${{ fromJson(needs.load-matrix.outputs.matrix-json) }}
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          conda-remove-defaults: true
          auto-update-conda: true
          auto-activate-base: true

      - name: Download llvmlite wheel
        if: inputs.llvmlite_wheel_runid != ''
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-osx-arm64-py${{ matrix.python-version }}
          path: llvmlite_wheels
          run-id: ${{ inputs.llvmlite_wheel_runid }}
          repository: numba/llvmlite
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install build dependencies
        run: |
          if [ "${{ inputs.llvmlite_wheel_runid }}" != "" ]; then
              arch -arm64 python -m pip install llvmlite_wheels/*.whl
          else
              conda install -c ${{ env.CONDA_CHANNEL_NUMBA }} llvmlite
          fi
          conda install -c ${{ env.CONDA_CHANNEL_NUMBA }} python-build numpy==${{ matrix.numpy_build }} clang_osx-arm64 clangxx_osx-arm64
          conda install --yes llvm-openmp

      - name: Build sdist [once - py3.10]
        if: matrix.python-version == '3.10'
        run: arch -arm64 python -m build --sdist

      - name: Build wheel
        run: arch -arm64 python -m build

      - name: Fix macOS wheel library paths
        run: |
          arch -arm64 python -m pip install wheel
          cd dist
          arch -arm64 python ../buildscripts/github/patch_wheel_dylib.py ./*.whl
          ls -la ./*.whl
          # inspect the wheel
          find . -name "*.so" -o -name "*.dylib" | xargs -I {} otool -L {}

      - name: Upload numba wheel
        uses: actions/upload-artifact@v4
        with:
          name: numba-osx-arm64-py${{ matrix.python-version }}-np${{ matrix.numpy_build }}
          path: dist/*.whl
          compression-level: 0
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
          if-no-files-found: error

      - name: Upload numba sdist
        if: matrix.python-version == '3.10'
        uses: actions/upload-artifact@v4
        with:
            name: numba-sdist
            path: dist/*.tar.gz
            compression-level: 0
            retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}
            if-no-files-found: error

  osx-arm64-test:
    name: osx-arm64-test (py ${{ matrix.python-version }}, np ${{ matrix.numpy_build }})
    needs: [load-matrix, osx-arm64-build]
    runs-on: macos-14
    defaults:
      run:
        shell: bash -elx {0}
    strategy:
      matrix:
        include: ${{ fromJson(needs.load-matrix.outputs.matrix-json) }}
      fail-fast: false

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download Numba wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: numba-osx-arm64-py${{ matrix.python-version }}-np${{ matrix.numpy_build }}
          path: dist

      - name: Download llvmlite wheel
        if: inputs.llvmlite_wheel_runid != ''
        uses: actions/download-artifact@v4
        with:
          name: llvmlite-osx-arm64-py${{ matrix.python-version }}
          path: llvmlite_wheels
          run-id: ${{ inputs.llvmlite_wheel_runid }}
          repository: numba/llvmlite
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install libomp and set DYLD_FALLBACK_LIBRARY_PATH
        run: |
          brew install libomp
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix libomp)/lib" >> $GITHUB_ENV
          echo "Set DYLD_FALLBACK_LIBRARY_PATH to: $(brew --prefix libomp)/lib"

      - name: Validate and test wheel
        run: |
          PYTHON_PATH=$(which python${{ matrix.python-version }})
          "$PYTHON_PATH" -m venv .venv && source .venv/bin/activate
          arch -arm64 python -m pip install --upgrade pip twine
          ls -l dist
          if [ "${{ inputs.llvmlite_wheel_runid }}" != "" ]; then
              arch -arm64 python -m pip install llvmlite_wheels/*.whl
          else
              arch -arm64 python -m pip install -i $WHEELS_INDEX_URL llvmlite
          fi
          arch -arm64 python -m twine check dist/*.whl
          arch -arm64 python -m pip install dist/numba*.whl numpy==${{ matrix.numpy_build }}

          # print Numba system information
          arch -arm64 python -m numba -s

          # run tests
          arch -arm64 python -m numba.runtests -m 4 -v
