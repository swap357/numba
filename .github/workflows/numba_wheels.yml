name: Build wheels

on:
  push:
    branches:
    - main
    tags:
    - v*
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  load-matrix:
    runs-on: ubuntu-latest
    outputs:
      build-matrix-json: ${{ steps.load_matrix_json.outputs.build-matrix-json }}
    steps:
      - uses: actions/checkout@v5
      - id: load_matrix_json
        name: Load Workflow Matrix JSON
        run: |
          BUILD_MATRIX_JSON=$(jq -c .wheel_build_matrix .github/workflows/wheel_workflow_matrix.json)
          echo "build-matrix-json=$BUILD_MATRIX_JSON" >> $GITHUB_OUTPUT

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: load-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, ubuntu-22.04-arm]
        build: ${{ fromJson(needs.load-matrix.outputs.build-matrix-json) }}

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
          persist-credentials: false

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.0
        env:
          # Keep most settings in pyproject.toml; minimally wire in build+test here.
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_PRERELEASE_PYTHONS: "1"
          CIBW_ARCHS_LINUX: "auto"
          CIBW_ARCHS_MACOS: "auto"
          CIBW_CONTAINER_ENGINE: "docker"
          CIBW_BUILD_VERBOSITY: "1"
          CIBW_BUILD: "${{ matrix.build.python_tag }}-*"

          # Build prerequisites (Numba requires llvmlite present at build time)
          CIBW_BEFORE_BUILD: "python -m pip install -U pip setuptools wheel && python -m pip install numpy==${{ matrix.build.numpy_build }} llvmlite"

          # Align with existing macOS wheel target (see numba_osx-arm64_wheel_builder.yml)
          CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=11.1"

          # Ensure OpenMP at test time on macOS runners
          CIBW_BEFORE_TEST_MACOS: "brew install libomp || true"

          # Minimal test setup and command
          CIBW_TEST_REQUIRES: "numpy pytest"
          CIBW_TEST_COMMAND: "python -m numba -s && python -m numba.runtests -m 4 -v"
          CIBW_TEST_COMMAND_MACOS: "export DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix libomp)/lib && python -m numba -s && python -m numba.runtests -m 4 -v"

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
          compression-level: 0
          if-no-files-found: error

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz
          compression-level: 0
          if-no-files-found: error
