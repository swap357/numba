name: Build wheels

on:
  push:
    branches:
    - main
    tags:
    - v*
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  WHEELS_INDEX_URL: https://pypi.anaconda.org/numba/label/dev/simple

jobs:
  load-matrix:
    runs-on: ubuntu-latest
    outputs:
      build-matrix-json: ${{ steps.load_matrix_json.outputs.build-matrix-json }}
      test-matrix-json: ${{ steps.load_matrix_json.outputs.test-matrix-json }}
    steps:
      - uses: actions/checkout@v5
      - id: load_matrix_json
        name: Load Workflow Matrix JSON
        run: |
          BUILD_MATRIX_JSON=$(jq -c .wheel_build_matrix .github/workflows/wheel_workflow_matrix.json)
          TEST_MATRIX_JSON=$(jq -c '.wheel_test_matrix | map(. + {"python_tag": ("cp" + (."python-version" | split(".") | join("")))})' .github/workflows/wheel_workflow_matrix.json)
          echo "build-matrix-json=$BUILD_MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "test-matrix-json=$TEST_MATRIX_JSON" >> $GITHUB_OUTPUT

  build_wheels:
    name: ${{ matrix.os }} (py ${{ matrix.build['python-version'] }}, np ${{ matrix.build.numpy_build }})
    needs: load-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, ubuntu-22.04-arm]
        build: ${{ fromJson(needs.load-matrix.outputs.build-matrix-json) }}

    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
          persist-credentials: false

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.0
        env:
          # Keep most settings in pyproject.toml; minimally wire in build+test here.
          CIBW_SKIP: "pp* *-musllinux_*"
          CIBW_PRERELEASE_PYTHONS: "1"
          CIBW_ARCHS_LINUX: "auto"
          CIBW_ARCHS_MACOS: "auto"
          CIBW_CONTAINER_ENGINE: "docker"
          CIBW_BUILD_VERBOSITY: "1"
          CIBW_BUILD: "${{ matrix.build.python_tag }}-*"

          # Build prerequisites (Numba requires llvmlite present at build time)
          CIBW_BEFORE_BUILD: |
            set -eux
            python -m pip install -U pip setuptools wheel
            python -m pip install numpy==${{ matrix.build.numpy_build }}
            if [ "$(uname -s)" = "Linux" ] && [ "$(uname -m)" = "x86_64" ]; then
              python -m pip install tbb==2021.6 tbb-devel==2021.6
            fi
            python -m pip install -i https://pypi.anaconda.org/numba/label/dev/simple llvmlite

          # Make the dev index available for dependency resolution during tests
          CIBW_ENVIRONMENT: "PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/numba/label/dev/simple"

          # Align with existing macOS wheel target and include dev index
          CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=11.1 PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/numba/label/dev/simple"


      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.build.python_tag }}
          path: ./wheelhouse/*.whl
          compression-level: 0
          if-no-files-found: error

  test_wheels:
    name: ${{ matrix.os }} (py ${{ matrix.test.python-version }}, np ${{ matrix.test.numpy_test }})
    needs: [load-matrix, build_wheels]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, ubuntu-22.04-arm]
        test: ${{ fromJson(needs.load-matrix.outputs.test-matrix-json) }}

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.test['python-version'] }}
          allow-prereleases: true

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.test.python_tag }}
          path: dist

      - name: Prepare macOS OpenMP
        if: runner.os == 'macOS'
        run: |
          brew update || true
          brew install libomp || true

      - name: Install and test wheel
        env:
          PIP_EXTRA_INDEX_URL: https://pypi.anaconda.org/numba/label/dev/simple
        run: |
          python -m venv .venv
          . .venv/bin/activate || .venv\Scripts\activate
          python -m pip install -U pip
          python -m pip install numpy==${{ matrix.test.numpy_test }} pytest
          if [ "$(uname -s)" = "Linux" ] && [ "$(uname -m)" = "x86_64" ]; then
            python -m pip install tbb==2021.6 tbb-devel==2021.6
          fi
          python -m pip install dist/*.whl
          if [ "${{ runner.os }}" = "macOS" ]; then
            export DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix libomp)/lib
          fi
          python -m numba -s

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz
          compression-level: 0
          if-no-files-found: error
